name: V3 Build and Push Docker Image to AWS ECR, GHCR and Deploy to EKS

env:
  IMAGE_NAME: ecr-igork-private
  VERSION_EXPRESSION: ^[vV][0-9]+.[0-9]+.[0-9]+$
  AWS_REGION: eu-central-1
  EKS_CLUSTER_NAME: igork-cluster
  HELM_CHART_NAME: ecr-igork-private
  GHCR_REGISTRY: ghcr.io
  GHCR_IMAGE_NAME: ${{ github.repository }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: Specify the version of the package (in format v*.*.*)
        type: string
        required: true
  push:
    tags:
      - '[vV][0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+'

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  extract-metadata:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.determine_tag.outputs.tag }}
      labels: ${{ steps.meta.outputs.labels }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}

      - name: Determine Docker tag
        id: determine_tag
        run: |
          if [[ "${{ github.ref_name }}" =~ ${{ env.VERSION_EXPRESSION }} ]]; then
            echo "::set-output name=tag::docker-${{ github.ref_name }}"
            echo "Using push tag version: ${{ github.ref_name }}"
          elif [[ "${{ github.event.inputs.version }}" =~ ${{ env.VERSION_EXPRESSION }} ]]; then
            echo "::set-output name=tag::docker-${{ github.event.inputs.version }}"
            echo "Using input version: ${{ github.event.inputs.version }}"
          else
            echo "Neither tag version nor input versions are available"
          fi

  build-push-image-to-ecr:
    runs-on: ubuntu-latest
    needs: extract-metadata
    outputs:
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}
      tag: ${{ needs.extract-metadata.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::162340708442:role/GitHubAction-RoleWithActions-igork-01
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Login to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.extract-metadata.outputs.tag }}
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:${{ needs.extract-metadata.outputs.tag }}
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:latest
          labels: ${{ needs.extract-metadata.outputs.labels }}

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build-push-image-to-ecr
    steps:
      - name: Test image tag and repository
        id: test_image_tag_and_repository
        run: |
          if $[[ "${{ needs.build-push-image-to-ecr.outputs.tag }}" =~ ${{ env.VERSION_EXPRESSION }} ]]; then
            echo "Invalid image tag '${{ needs.build-push-image-to-ecr.outputs.tag }}'"
            echo "::set-output name=run_jobs::false"
            exit 1
          elif contains("${{ needs.build-push-image-to-ecr.outputs.ecr_registry }}", '.dkr.ecr.'); then
            echo "Invalid image registry '${{ needs.build-push-image-to-ecr.outputs.ecr_registry }}'"
            echo "::set-output name=run_jobs::false"
            exit 1
          elif contains("${{ needs.build-push-image-to-ecr.outputs.ecr_registry }}", '.amazonaws.com'); then
            echo "Invalid image registry '${{ needs.build-push-image-to-ecr.outputs.ecr_registry }}'"
            echo "::set-output name=run_jobs::false"
            exit 1
          else
            echo "::set-output name=run_jobs::true"
          fi

      - name: Early exit
        if: steps.test_image_tag_and_repository.outputs.run_jobs == false
        run: |
          gh run cancel

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::162340708442:role/GitHubAction-RoleWithActions-igork-01
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Update KubeConfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region=${{ env.AWS_REGION }}

      - name: Deploy Helm Chart To Amazon EKS Cluster
        run: |
          helm upgrade --reuse-values -n vegait-training ${{ env.HELM_CHART_NAME }} kube/helm/app --set=image.tag=${{ needs.build-push-image-to-ecr.outputs.tag }} --set=image.repository=${{ needs.build-push-image-to-ecr.outputs.ecr_registry }}
